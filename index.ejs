<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login & Registration Forms</title>
    <link href="https://fonts.cdnfonts.com/css/get-schwifty" rel="stylesheet">
    
    <style>
        /* Global Styles */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Get Schwifty', 'Comic Sans MS', cursive, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: #000 url(https://imagenes.20minutos.es/files/image_1920_1080/uploads/imagenes/2020/06/01/vDPXV2VqzeALc7WVnOetzS1xQQ7.jpg) no-repeat center center/cover;
            position: relative;
            /* Change overflow hidden to auto */
            overflow: auto; 
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: -1;
        }

        /* Form Container Styles */
        .container {
            display: flex;
            justify-content: space-between; /* Ensure forms are separated */
            align-items: flex-start;
            width: 100%; /* Use full width */
            margin: 0; /* Remove auto margin to align with screen edges */
            padding: 0 20px; /* Add minimal padding for slight separation */
            position: relative;
            z-index: 1;
        }

        .form-container {
            width: 45%; /* Adjust width for better fit on medium screens */
            margin: 1rem 0; /* Add some margin for spacing */
            background: rgba(0, 0, 0, 0.8);
            padding: 2rem;
            border-radius: 15px;
            border: 3px solid #00ff00;
            box-shadow: 0 0 20px #ff00ff;
            color: #00ff00;
            position: relative;
            overflow: hidden;
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: url('rick-morty-pattern.png') repeat;
            opacity: 0.3;
            animation: rotate 20s linear infinite;
            z-index: -1;
        }

        /* Form Elements */
        .form-container h2 {
            font-size: 2rem;
            margin-bottom: 1.5rem;
            text-align: center;
            text-shadow: 0 0 10px #ff00ff;
            position: relative;
        }

        .form-container h2::after {
            content: 'Wubba Lubba Dub Dub!';
            display: block;
            font-size: 0.8rem;
            color: #ff00ff;
            margin-top: 0.5rem;
        }

        .form-container label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-container input {
            width: 100%;
            padding: 12px;
            margin-bottom: 1rem;
            border: none;
            border-radius: 8px;
            background: rgba(255,255,255,0.1);
            color: white;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-container input:focus {
            outline: none;
            background: rgba(255,255,255,0.2);
            box-shadow: 0 0 0 3px rgba(255,255,255,0.3);
        }

        .form-container button {
            width: 100%;
            background: #00c853;
            color: white;
            padding: 12px;
            font-size: 1rem;
            font-weight: 600;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
        }

        .form-container button:hover {
            background: #00b248;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.3);
        }

        .form-container span {
            display: block;
            margin-top: 1rem;
            text-align: center;
            font-size: 0.9rem;
        }

        /* Animations */
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0px); }
        }

        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @media (max-width: 1000px) {
            .container {
                flex-direction: column; /* Stack forms vertically on smaller screens */
                align-items: center; /* Center forms horizontally */
                padding: 0 10px; /* Adjust padding for smaller screens */
                /* Add some top and bottom padding to ensure forms are not cut off */
                padding-top: 20px; 
                padding-bottom: 20px;
            }

            .form-container {
                width: 90%; /* Increase width to fit the screen */
                margin: 1rem 0; /* Maintain margin for spacing */
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <% if (typeof token!== 'undefined' && token) { %>
            <script>
                const token = '<%= token %>';
                try {
                    const decoded = jwt_decode(token);
                    // You may need to adjust the expiration check based on your token's structure
                    if (decoded.exp && decoded.exp < Date.now() / 1000) {
                        throw new Error('Token expired');
                    }
                    // Token is valid, show welcome message
                    document.write(`<div class="form-container">
                        <h2>Welcome, <%= username %>!</h2>
                        <button id="logout">Logout</button>
                    </div>`);
                } catch (error) {
                    // Token is invalid or expired, show login and register forms
                    document.write(`
                        <div class="form-container" id="login-section">
                            <form id="login-form" action="/login" method="POST">
                                <h2>Login</h2>
                                <label for="username">Username</label>
                                <input type="text" id="username" name="username" required>
                                <label for="password">Password</label>
                                <input type="password" id="password" name="password" required>
                                <button type="submit">Login</button>
                                <span id="login-span"></span>
                            </form>
                        </div>
                        <div class="form-container" id="register-section">
                            <form id="register-form">
                                <h2>Register</h2>
                                <label for="new-username">Username</label>
                                <input type="text" id="new-username" name="username" required>
                                <label for="new-password">Password</label>
                                <input type="password" id="new-password" name="password" required>
                                <label for="confirm-password">Confirm Password</label>
                                <input type="password" id="confirm-password" name="confirm-password" required>
                                <button type="submit">Register</button>
                                <span id="register-span"></span>
                            </form>
                        </div>
                    `);
                }
            </script>
        <% } else { %>
            <div class="form-container" id="login-section">
                <form id="login-form" action="/login" method="POST">
                    <h2>Login</h2>
                    <label for="username">Username</label>
                    <input type="text" id="username" name="username" required>
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required>
                    <button type="submit">Login</button>
                    <span id="login-span"></span>
                </form>
            </div>
            <div class="form-container" id="register-section">
                <form id="register-form">
                    <h2>Register</h2>
                    <label for="new-username">Username</label>
                    <input type="text" id="new-username" name="username" required>
                    <label for="new-password">Password</label>
                    <input type="password" id="new-password" name="password" required>
                    <label for="confirm-password">Confirm Password</label>
                    <input type="password" id="confirm-password" name="confirm-password" required>
                    <button type="submit">Register</button>
                    <span id="register-span"></span>
                </form>
            </div>
        <% } %>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jwt-decode/3.1.2/jwt-decode.min.js"></script>
    <script>
        const $ = el => document.querySelector(el);
        const handleApiResponse = async (response) => {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            } else {
                const text = await response.text();
                throw new Error(text || 'Invalid server response');
            }
        };
        const loginForm = $('#login-form');
        const registerForm = $('#register-form');
        const logoutButton = $('#logout');
        const loginSpan = $('#login-span');
        const registerSpan = $('#register-span');
        loginForm?.addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = $('#username').value;
            const password = $('#password').value;
            try {
                const response = await fetch('/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });
                const data = await handleApiResponse(response);
                if (response.ok) {
                    // Redirect to the example EJS page
                    window.location.href = '/example'; // Ensure '/example' is a valid route
                } else {
                    throw new Error(data.message || 'Login failed');
                }
            } catch (error) {
                loginSpan.innerText = error.message;
                loginSpan.style.color = 'red';
            }
        });
        registerForm?.addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = $('#new-username').value;
            const password = $('#new-password').value;
            const confirmPassword = $('#confirm-password').value;
            if (password !== confirmPassword) {
                registerSpan.innerText = 'Passwords do not match';
                registerSpan.style.color = 'red';
                return;
            }
            try {
                const response = await fetch('/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });
                const data = await handleApiResponse(response);
                if (response.ok) {
                    registerSpan.innerText = 'Registration successful! Redirecting...';
                    registerSpan.style.color = 'green';
                    setTimeout(() => window.location.href = '/', 2000);
                } else {
                    throw new Error(data.message || 'Registration failed');
                }
            } catch (error) {
                registerSpan.innerText = error.message;
                registerSpan.style.color = 'red';
            }
        });
        logoutButton?.addEventListener('click', async (e) => {
            e.preventDefault();
            try {
                const response = await fetch('/logout', {
                    method: 'GET'
                });
                if (response.ok) {
                    window.location.href = '/';
                } else {
                    throw new Error('Logout failed');
                }
            } catch (error) {
                console.error('Logout failed:', error);
                alert('Logout failed. Please try again.');
            }
        });
    </script>
</body>
</html>